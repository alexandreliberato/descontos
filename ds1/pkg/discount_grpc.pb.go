// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package descontos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscountCalculatorClient is the client API for DiscountCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountCalculatorClient interface {
	GetDiscount(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Discount, error)
}

type discountCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountCalculatorClient(cc grpc.ClientConnInterface) DiscountCalculatorClient {
	return &discountCalculatorClient{cc}
}

func (c *discountCalculatorClient) GetDiscount(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Discount, error) {
	out := new(Discount)
	err := c.cc.Invoke(ctx, "/DiscountCalculator/GetDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountCalculatorServer is the server API for DiscountCalculator service.
// All implementations must embed UnimplementedDiscountCalculatorServer
// for forward compatibility
type DiscountCalculatorServer interface {
	GetDiscount(context.Context, *Param) (*Discount, error)
	mustEmbedUnimplementedDiscountCalculatorServer()
}

// UnimplementedDiscountCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedDiscountCalculatorServer struct {
}

func (UnimplementedDiscountCalculatorServer) GetDiscount(context.Context, *Param) (*Discount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscount not implemented")
}
func (UnimplementedDiscountCalculatorServer) mustEmbedUnimplementedDiscountCalculatorServer() {}

// UnsafeDiscountCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountCalculatorServer will
// result in compilation errors.
type UnsafeDiscountCalculatorServer interface {
	mustEmbedUnimplementedDiscountCalculatorServer()
}

func RegisterDiscountCalculatorServer(s grpc.ServiceRegistrar, srv DiscountCalculatorServer) {
	s.RegisterService(&DiscountCalculator_ServiceDesc, srv)
}

func _DiscountCalculator_GetDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountCalculatorServer).GetDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiscountCalculator/GetDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountCalculatorServer).GetDiscount(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountCalculator_ServiceDesc is the grpc.ServiceDesc for DiscountCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiscountCalculator",
	HandlerType: (*DiscountCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscount",
			Handler:    _DiscountCalculator_GetDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount.proto",
}
